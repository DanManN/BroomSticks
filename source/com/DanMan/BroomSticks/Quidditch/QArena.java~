/*     */ package com.DanMan.BroomSticks.Quidditch;
/*     */ 
/*     */ import com.DanMan.BroomSticks.main.BroomSticks;
/*     */ import com.DanMan.BroomSticks.main.ConfigLoader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Scanner;
/*     */ import org.bukkit.Bukkit;
/*     */ import org.bukkit.Location;
/*     */ import org.bukkit.World;
/*     */ import org.bukkit.entity.Player;
/*     */ 
/*     */ 
/*     */ public class QArena
/*     */ {
/*     */   private BroomSticks plugin;
/*  22 */   private static File sFile = new File("plugins/BroomSticks/arenas.txt");
/*     */   private Location center;
/*     */   private String name;
/*     */   
/*     */   public QArena(String name, BroomSticks plugin) {
/*  27 */     this.plugin = plugin;
/*  28 */     this.name = name;
/*  29 */     this.center = loadCenter();
/*     */   }
/*     */   
/*     */   public void setAndSave(Location center) {
/*  33 */     this.center = center;
/*     */     try {
/*  35 */       sFile.createNewFile();
/*     */     } catch (IOException e) {
/*  37 */       System.err.println("Error: Could not create file due to illegal characters." + e);
/*     */     }
/*     */     try {
/*  40 */       PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(sFile, true)));
/*  41 */       out.println(this.name + ": " + center.getWorld().getName() + "," + center.getBlockX() + "," + center.getBlockZ());
/*  42 */       out.flush();
/*  43 */       out.close();
/*     */     } catch (IOException e) {
/*  45 */       System.err.println("Error: Could not write to file: " + e);
/*     */     }
/*     */   }
/*     */   
/*     */   public boolean arenaExists() {
/*  50 */     String data = "";
/*  51 */     if (sFile.exists()) {
/*     */       try {
/*  53 */         Scanner in = new Scanner(sFile);
/*  54 */         while (in.hasNextLine()) {
/*  55 */           data = in.nextLine();
/*  56 */           if (data.startsWith(this.name)) {
/*  57 */             in.close();
/*  58 */             return true;
/*     */           }
/*     */         }
/*  61 */         in.close();
/*     */       } catch (FileNotFoundException ex) {
/*  63 */         System.err.println("Error: Could not read from file: " + ex);
/*     */       }
/*     */     }
/*  66 */     return false;
/*     */   }
/*     */   
/*     */   private Location loadCenter() {
/*  70 */     String data = "";
/*  71 */     if (sFile.exists()) {
/*     */       try {
/*  73 */         Scanner in = new Scanner(sFile);
/*  74 */         while (in.hasNextLine()) {
/*  75 */           data = in.nextLine();
/*  76 */           if (data.startsWith(this.name)) {
/*     */             break;
/*     */           }
/*     */         }
/*  80 */         in.close();
/*     */       } catch (FileNotFoundException ex) {
/*  82 */         System.err.println("Error: Could not read from file: " + ex);
/*     */       }
/*  84 */       if ((!data.equals("")) && (data.startsWith(this.name))) {
/*  85 */         data.replace(this.name + ": ", "");
/*  86 */         String[] coords = data.split(",");
/*  87 */         World w = Bukkit.getWorld(coords[0]);
/*  88 */         int x = Integer.parseInt(coords[1]);
/*  89 */         int z = Integer.parseInt(coords[2]);
/*  90 */         return new Location(w, x, 0.0D, z);
/*     */       }
/*     */     }
/*  93 */     return null;
/*     */   }
/*     */   
/*     */   public Location getCenter() {
/*  97 */     return this.center;
/*     */   }
/*     */   
/*     */   public void deleteArena() {
/* 101 */     if (sFile.exists()) {
/* 102 */       StringBuilder nContent = new StringBuilder();
/*     */       try {
/* 104 */         Scanner in = new Scanner(sFile);
/*     */         
/* 106 */         while (in.hasNextLine()) {
/* 107 */           String data = in.nextLine();
/* 108 */           if (!data.startsWith(this.name)) {
/* 109 */             nContent.append(data).append("\r\n");
/*     */           }
/*     */         }
/* 112 */         in.close();
/*     */       } catch (FileNotFoundException ex) {
/* 114 */         System.err.println("Error: Could not read from file: " + ex);
/*     */       }
/*     */       try {
/* 117 */         PrintWriter out = new PrintWriter(sFile);
/* 118 */         out.print(nContent);
/* 119 */         out.flush();
/* 120 */         out.close();
/*     */       } catch (FileNotFoundException e) {
/* 122 */         System.err.println("Error: Could not write to file: " + e);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   public String getName() {
/* 128 */     return this.name;
/*     */   }
/*     */   
/*     */   public void setName(String name) {
/* 132 */     this.name = name;
/*     */   }
/*     */   
/*     */   public int getRadius() {
/* 136 */     return this.plugin.getConfigLoader().getArenaRadius();
/*     */   }
/*     */   
/*     */   public boolean inArena(Location loc)
/*     */   {
/* 141 */     if (this.center.getWorld() == loc.getWorld()) {
/* 142 */       double x1 = this.center.getX();
/* 143 */       double z1 = this.center.getZ();
/*     */       
/*     */ 
/* 146 */       double x2 = loc.getX();
/* 147 */       double z2 = loc.getZ();
/*     */       
/* 149 */       double distance = Math.sqrt(Math.pow(x2 - x1, 2.0D) + Math.pow(z2 - z1, 2.0D));
/*     */       
/* 151 */       return distance <= getRadius();
/*     */     }
/* 153 */     return false;
/*     */   }
/*     */   
/*     */   public static void arenaBroadcast(String message, QArena qa)
/*     */   {
/* 158 */     for (Player player : ) {
/* 159 */       if (qa.inArena(player.getLocation())) {
/* 160 */         player.sendMessage(message);
/*     */       }
/*     */     }
/*     */   }
/*     */ }


/* Location:              /home/danman/sauce/java/Minecraft/source-plugins/BroomSticks.jar!/com/DanMan/BroomSticks/Quidditch/QArena.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       0.7.1
 */